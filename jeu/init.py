import numpy as np
import pygame
"""np.array([[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 2, 2, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1],
                       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1],
                       [1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 1],
                       [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
                       [1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1],
                       [1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1],
                       [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                       [1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1],
                       [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                       [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]])"""


# Renvoie une liste correspondant à la grille de jeu, chaque chiffre corresond à un modèle de case, la position initiale du Pac-Man et celle des fantômes
# Exemples :
# 1 : mur bord côté gauche, 2 : mur bord côté droit
# 0 : case vide
# -1 : gomme normale, -2 : super-gomme
# -3 : tunnel, -4 : bout du tunnel
def init_grille():
    Grille = np.array([[18, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 29, 28, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 19],
                       [1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9,
                           10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2],
                       [1, -1, 13, 12, 12, 14, -1, 13, 12, 12, 12, 14, -1, 9,
                           10, -1, 13, 12, 12, 12, 14, -1, 13, 12, 12, 14, -1, 2],
                       [1, -2, 9, 0, 0, 10, -1, 9, 0, 0, 0, 10, -1, 9,
                           10, -1, 9, 0, 0, 0, 10, -1, 9, 0, 0, 10, -2, 2],
                       [1, -1, 15, 11, 11, 16, -1, 15, 11, 11, 11, 16, -1, 15,
                           16, -1, 15, 11, 11, 11, 16, -1, 15, 11, 11, 16, -1, 2],
                       [1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -
                           1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2],
                       [1, -1, 13, 12, 12, 14, -1, 13, 14, -1, 13, 12, 12, 12,
                           12, 12, 12, 14, -1, 13, 14, -1, 13, 12, 12, 14, -1, 2],
                       [1, -1, 15, 11, 11, 16, -1, 9, 10, -1, 15, 11, 11, 23,
                           22, 11, 11, 16, -1, 9, 10, -1, 15, 11, 11, 16, -1, 2],
                       [1, -1, -1, -1, -1, -1, -1, 9, 10, -1, -1, -1, -1, 9,
                           10, -1, -1, -1, -1, 9, 10, -1, -1, -1, -1, -1, -1, 2],
                       [20, 4, 4, 4, 4, 6, -1, 9, 24, 12, 12, 14, 0, 9, 10,
                           0, 13, 12, 12, 25, 10, -1, 5, 4, 4, 4, 4, 21],
                       [-3, -3, -3, -3, -4, 1, -1, 9, 22, 11, 11, 16, 0, 15,
                           16, 0, 15, 11, 11, 23, 10, -1, 2, -4, -3, -3, -3, -3],
                       [0, 0, 0, 0, 0, 1, -1, 9, 10, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 9, 10, -1, 2, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 1, -1, 9, 10, 0, 5, 4, 27, 17,
                           17, 26, 4, 6, 0, 9, 10, -1, 2, 0, 0, 0, 0, 0],
                       [3, 3, 3, 3, 3, 8, -1, 15, 16, 0, 2, 0, 0, 0, 0,
                           0, 0, 1, 0, 15, 16, -1, 7, 3, 3, 3, 3, 3],
                       [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 2, 0, 0, 0, 0,
                           0, 0, 1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
                       [4, 4, 4, 4, 4, 6, -1, 13, 14, 0, 2, 0, 0, 0, 0,
                           0, 0, 1, 0, 13, 14, -1, 5, 4, 4, 4, 4, 4],
                       [0, 0, 0, 0, 0, 1, -1, 9, 10, 0, 7, 3, 3, 3, 3,
                           3, 3, 8, 0, 9, 10, -1, 2, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 1, -1, 9, 10, 0, 0, 0, 0, 0, 0,
                           0, 0, 0, 0, 9, 10, -1, 2, 0, 0, 0, 0, 0],
                       [0, 0, 0, 0, 0, 1, -1, 9, 10, 0, 13, 12, 12, 12,
                           12, 12, 12, 14, 0, 9, 10, -1, 2, 0, 0, 0, 0, 0],
                       [18, 3, 3, 3, 3, 8, -1, 15, 16, 0, 15, 11, 11, 23,
                           22, 11, 11, 16, 0, 15, 16, -1, 7, 3, 3, 3, 3, 19],
                       [1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9,
                        10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2],
                       [1, -1, 13, 12, 12, 14, -1, 13, 12, 12, 12, 14, -1, 9,
                        10, -1, 13, 12, 12, 12, 14, -1, 13, 12, 12, 14, -1, 2],
                       [1, -1, 15, 11, 23, 10, -1, 15, 11, 11, 11, 16, -1, 15,
                        16, -1, 15, 11, 11, 11, 16, -1, 9, 22, 11, 16, -1, 2],
                       [1, -2, -1, -1, 9, 10, -1, -1, -1, -1, -1, -1, -1, -1, -
                        1, -1, -1, -1, -1, -1, -1, -1, 9, 10, -1, -1, -2, 2],
                       [34, 12, 14, -1, 9, 10, -1, 13, 14, -1, 13, 12, 12, 12,
                        12, 12, 12, 14, -1, 13, 14, -1, 9, 10, -1, 13, 12, 35],
                       [32, 11, 16, -1, 15, 16, -1, 9, 10, -1, 15, 11, 11, 23,
                        22, 11, 11, 16, -1, 9, 10, -1, 15, 16, -1, 15, 11, 33],
                       [1, -1, -1, -1, -1, -1, -1, 9, 10, -1, -1, -1, -1, 9,
                        10, -1, -1, -1, -1, 9, 10, -1, -1, -1, -1, -1, -1, 2],
                       [1, -1, 13, 12, 12, 12, 12, 25, 24, 12, 12, 14, -1, 9,
                        10, -1, 13, 12, 12, 25, 24, 12, 12, 12, 12, 14, -1, 2],
                       [1, -1, 15, 11, 11, 11, 11, 11, 11, 11, 11, 16, -1, 15,
                        16, -1, 15, 11, 11, 11, 11, 11, 11, 11, 11, 16, -1, 2],
                       [1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -
                        1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2],
                       [20, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 21]])
    return Grille, (23, 13.5), (14, 13.5)


# Renvoie la grille de jeu dessinée
def dessin_grille(Grille, fenetre, nb_lignes, nb_colonnes, texture):
    fenetre.fill(0)
    for i in range(nb_lignes):
        for j in range(nb_colonnes):
            if Grille[i, j] >= 1:
                fenetre.blit(texture[Grille[i, j]],
                             (14*j, 14*i))
    return fenetre
